package pdo.deepspace;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DP".
*/
public class DPDao extends AbstractDao<DP, Long> {

    public static final String TABLENAME = "DP";

    /**
     * Properties of entity DP.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Date = new Property(1, String.class, "date", false, "DATE");
        public final static Property Explanation = new Property(2, String.class, "explanation", false, "EXPLANATION");
        public final static Property Hdurl = new Property(3, String.class, "hdurl", false, "HDURL");
        public final static Property Title = new Property(4, String.class, "title", false, "TITLE");
        public final static Property Url = new Property(5, String.class, "url", false, "URL");
        public final static Property Media_type = new Property(6, String.class, "media_type", false, "MEDIA_TYPE");
    };


    public DPDao(DaoConfig config) {
        super(config);
    }
    
    public DPDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DP\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DATE\" TEXT NOT NULL UNIQUE ," + // 1: date
                "\"EXPLANATION\" TEXT," + // 2: explanation
                "\"HDURL\" TEXT," + // 3: hdurl
                "\"TITLE\" TEXT," + // 4: title
                "\"URL\" TEXT," + // 5: url
                "\"MEDIA_TYPE\" TEXT);"); // 6: media_type
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DP\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DP entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getDate());
 
        String explanation = entity.getExplanation();
        if (explanation != null) {
            stmt.bindString(3, explanation);
        }
 
        String hdurl = entity.getHdurl();
        if (hdurl != null) {
            stmt.bindString(4, hdurl);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(5, title);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(6, url);
        }
 
        String media_type = entity.getMedia_type();
        if (media_type != null) {
            stmt.bindString(7, media_type);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DP readEntity(Cursor cursor, int offset) {
        DP entity = new DP( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // date
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // explanation
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // hdurl
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // title
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // url
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // media_type
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DP entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDate(cursor.getString(offset + 1));
        entity.setExplanation(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setHdurl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTitle(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMedia_type(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DP entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DP entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
